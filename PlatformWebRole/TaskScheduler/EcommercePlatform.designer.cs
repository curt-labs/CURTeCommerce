#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskScheduler
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ecom_platform")]
	public partial class EcommercePlatformDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertScheduledTask(ScheduledTask instance);
    partial void UpdateScheduledTask(ScheduledTask instance);
    partial void DeleteScheduledTask(ScheduledTask instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public EcommercePlatformDataContext() : 
				base(global::TaskScheduler.Properties.Settings.Default.ecom_platformConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EcommercePlatformDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcommercePlatformDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcommercePlatformDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcommercePlatformDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ScheduledTask> ScheduledTasks
		{
			get
			{
				return this.GetTable<ScheduledTask>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduledTask")]
	public partial class ScheduledTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private string _url;
		
		private System.Nullable<System.DateTime> _runtime;
		
		private System.Nullable<System.DateTime> _lastRan;
		
		private System.Nullable<int> _interval;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnruntimeChanging(System.Nullable<System.DateTime> value);
    partial void OnruntimeChanged();
    partial void OnlastRanChanging(System.Nullable<System.DateTime> value);
    partial void OnlastRanChanged();
    partial void OnintervalChanging(System.Nullable<int> value);
    partial void OnintervalChanged();
    #endregion
		
		public ScheduledTask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255)")]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runtime", DbType="DateTime")]
		public System.Nullable<System.DateTime> runtime
		{
			get
			{
				return this._runtime;
			}
			set
			{
				if ((this._runtime != value))
				{
					this.OnruntimeChanging(value);
					this.SendPropertyChanging();
					this._runtime = value;
					this.SendPropertyChanged("runtime");
					this.OnruntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastRan", DbType="DateTime NULL")]
		public System.Nullable<System.DateTime> lastRan
		{
			get
			{
				return this._lastRan;
			}
			set
			{
				if ((this._lastRan != value))
				{
					this.OnlastRanChanging(value);
					this.SendPropertyChanging();
					this._lastRan = value;
					this.SendPropertyChanged("lastRan");
					this.OnlastRanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interval", DbType="int NULL")]
		public System.Nullable<int> interval
		{
			get
			{
				return this._interval;
			}
			set
			{
				if ((this._interval != value))
				{
					this.OnintervalChanging(value);
					this.SendPropertyChanging();
					this._interval = value;
					this.SendPropertyChanged("interval");
					this.OnintervalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _settingID;
		
		private int _groupID;
		
		private string _name;
		
		private string _value;
		
		private bool _isImage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsettingIDChanging(int value);
    partial void OnsettingIDChanged();
    partial void OngroupIDChanging(int value);
    partial void OngroupIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnisImageChanging(bool value);
    partial void OnisImageChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int settingID
		{
			get
			{
				return this._settingID;
			}
			set
			{
				if ((this._settingID != value))
				{
					this.OnsettingIDChanging(value);
					this.SendPropertyChanging();
					this._settingID = value;
					this.SendPropertyChanged("settingID");
					this.OnsettingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="Int NOT NULL")]
		public int groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(255)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isImage", DbType="Bit NOT NULL")]
		public bool isImage
		{
			get
			{
				return this._isImage;
			}
			set
			{
				if ((this._isImage != value))
				{
					this.OnisImageChanging(value);
					this.SendPropertyChanging();
					this._isImage = value;
					this.SendPropertyChanged("isImage");
					this.OnisImageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
